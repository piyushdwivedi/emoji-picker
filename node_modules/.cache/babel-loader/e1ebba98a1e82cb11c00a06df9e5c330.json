{"ast":null,"code":"import _classCallCheck from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/piyushdwivedi/coding_practice/emoji-picker/src/components/EmojiPaint/emoji-paint.js\";\nimport React, { Component } from 'react';\nimport EmojiPicker from './../EmojiPicker/emoji-picker';\nimport './emoji-paint.css';\nimport EmojiGrid from '../EmojiGrid/emoji-grid';\nvar DEFAULT_HEIGHT = 8;\nvar DEFAULT_WIDTH = 10;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.toggleEmojiPicker = _this.toggleEmojiPicker.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateActiveEmoji = _this.updateActiveEmoji.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.brushSelected = _this.brushSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.eraserSelected = _this.eraserSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      activeEmoji: props.emoji[0],\n      height: DEFAULT_HEIGHT,\n      isEmojiPickerShowing: false,\n      width: DEFAULT_WIDTH,\n      brushActive: false,\n      eraserActive: false,\n      invalidWidth: false,\n      invalidHeight: false\n    };\n    return _this;\n  }\n  /**\n   * Toggle the visibility of the emoji picker\n   */\n\n\n  _createClass(App, [{\n    key: \"toggleEmojiPicker\",\n    value: function toggleEmojiPicker() {\n      this.setState(function (_ref) {\n        var isEmojiPickerShowing = _ref.isEmojiPickerShowing;\n        return {\n          isEmojiPickerShowing: !isEmojiPickerShowing\n        };\n      });\n    }\n    /**\n     * Set the currently active emoji symbol\n     * @param {String} emoji - the next active emoji\n     */\n\n  }, {\n    key: \"updateActiveEmoji\",\n    value: function updateActiveEmoji(emoji) {\n      this.setState(function () {\n        return {\n          activeEmoji: emoji,\n          isEmojiPickerShowing: false\n        };\n      });\n    }\n    /**\n     * Update the canvas dimensions based on new height and/or width\n     * @param {Object} dimensions - new dimensions\n     * @param {Number} dimensions.height - next height value\n     * @param {Number} dimensions.width - next width value\n     */\n\n  }, {\n    key: \"onSizeChange\",\n    value: function onSizeChange(_ref2) {\n      var height = _ref2.height,\n          width = _ref2.width;\n      this.setState(function () {\n        return {\n          height: height,\n          width: width,\n          invalidHeight: false,\n          invalidWidth: false\n        };\n      });\n    }\n    /** \n     * Toggle the brushActive flag on state \n     * to indicate if brush is active\n     */\n\n  }, {\n    key: \"brushSelected\",\n    value: function brushSelected() {\n      this.setState(function (brushActive) {\n        return {\n          brushActive: true,\n          eraserActive: false\n        };\n      });\n    }\n    /** \n     * Toggle the eraserActive flag on state \n     * to indicate if brush is active\n     */\n\n  }, {\n    key: \"eraserSelected\",\n    value: function eraserSelected() {\n      this.setState(function (eraserActive) {\n        return {\n          eraserActive: true,\n          brushActive: false\n        };\n      });\n    }\n    /**\n     * Render the EmojiPaint component\n     * @return {ReactElement} - EmojiPaint element\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var date = new Date();\n      var hours = date.getHours();\n      var minutes = date.getMinutes();\n      var suffix = hours >= 12 ? 'PM' : 'AM';\n      hours = hours > 12 ? hours - 12 : hours;\n      var timeToDisplay = hours + ':' + minutes.toString().padStart(2, 0) + ' ' + suffix;\n      return React.createElement(\"div\", {\n        className: \"emoji-paint\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"emoji-paint__toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"emoji-paint__controls\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"emoji-paint__control\",\n        onClick: this.toggleEmojiPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.activeEmoji), React.createElement(\"button\", {\n        className: \"emoji-paint__control\",\n        onClick: this.brushSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"emoji-paint__control_icon\",\n        src: \"brush.png\",\n        alt: \"brush\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"emoji-paint__control\",\n        onClick: this.eraserSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"emoji-paint__control_icon\",\n        src: \"eraser.png\",\n        alt: \"eraser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), this.state.isEmojiPickerShowing && React.createElement(EmojiPicker, {\n        emoji: this.props.emoji,\n        onSelect: this.updateActiveEmoji,\n        onClose: function onClose() {\n          return _this2.toggleEmojiPicker();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"emoji-paint__dimension \" + (this.state.invalidWidth ? 'error' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Width\", React.createElement(\"input\", {\n        type: \"text\",\n        className: \"emoji-paint__dimension_input\",\n        onBlur: function onBlur(e) {\n          return _this2.onSizeChange({\n            width: e.target.value,\n            height: _this2.state.height\n          });\n        },\n        defaultValue: this.state.width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        className: \"emoji-paint__dimension \" + (this.state.invalidHeight ? 'error' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Height\", React.createElement(\"input\", {\n        type: \"text\",\n        className: \"emoji-paint__dimension_input \" + (this.state.invalidHeight ? 'error' : ''),\n        onBlur: function onBlur(e) {\n          return _this2.onSizeChange({\n            height: e.target.value,\n            width: _this2.state.width\n          });\n        },\n        defaultValue: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"emoji_paint_user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://www.compulite.ca/wp-content/uploads/2016/02/slack-logo.png\",\n        alt: \"User Profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"user_name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Slack User\"), React.createElement(\"span\", {\n        className: \"current_time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, timeToDisplay)), React.createElement(\"div\", {\n        className: \"emoji_paint_grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, !this.state.invalidHeight && !this.state.invalidWidth && React.createElement(EmojiGrid, {\n        width: +this.state.width,\n        height: +this.state.height,\n        totalCount: +this.state.width * +this.state.height,\n        currentEmoji: this.state.activeEmoji,\n        brushActive: this.state.brushActive,\n        eraserActive: this.state.eraserActive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/piyushdwivedi/coding_practice/emoji-picker/src/components/EmojiPaint/emoji-paint.js"],"names":["React","Component","EmojiPicker","EmojiGrid","DEFAULT_HEIGHT","DEFAULT_WIDTH","App","props","toggleEmojiPicker","bind","updateActiveEmoji","brushSelected","eraserSelected","state","activeEmoji","emoji","height","isEmojiPickerShowing","width","brushActive","eraserActive","invalidWidth","invalidHeight","setState","date","Date","hours","getHours","minutes","getMinutes","suffix","timeToDisplay","toString","padStart","e","onSizeChange","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport EmojiPicker from './../EmojiPicker/emoji-picker';\n\nimport './emoji-paint.css';\nimport EmojiGrid from '../EmojiGrid/emoji-grid';\n\nconst DEFAULT_HEIGHT = 8;\nconst DEFAULT_WIDTH = 10;\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.toggleEmojiPicker = this.toggleEmojiPicker.bind(this);\n\t\tthis.updateActiveEmoji = this.updateActiveEmoji.bind(this);\n\t\tthis.brushSelected = this.brushSelected.bind(this);\n\t\tthis.eraserSelected = this.eraserSelected.bind(this);\n\t\tthis.state = {\n\t\t\tactiveEmoji: props.emoji[0],\n\t\t\theight: DEFAULT_HEIGHT,\n\t\t\tisEmojiPickerShowing: false,\n\t\t\twidth: DEFAULT_WIDTH,\n\t\t\tbrushActive: false,\n\t\t\teraserActive: false,\n\t\t\tinvalidWidth: false,\n\t\t\tinvalidHeight: false\n\t\t};\n\t}\n\n\t/**\n\t * Toggle the visibility of the emoji picker\n\t */\n\ttoggleEmojiPicker() {\n\t\tthis.setState(({ isEmojiPickerShowing }) => ({\n\t\t\tisEmojiPickerShowing: !isEmojiPickerShowing,\n\t\t}));\n\t}\n\n\t/**\n\t * Set the currently active emoji symbol\n\t * @param {String} emoji - the next active emoji\n\t */\n\tupdateActiveEmoji(emoji) {\n\t\tthis.setState(() => ({\n\t\t\tactiveEmoji: emoji,\n\t\t\tisEmojiPickerShowing: false,\n\t\t}));\n\t}\n\n\t/**\n\t * Update the canvas dimensions based on new height and/or width\n\t * @param {Object} dimensions - new dimensions\n\t * @param {Number} dimensions.height - next height value\n\t * @param {Number} dimensions.width - next width value\n\t */\n\tonSizeChange({ height, width }) {\n\t\tthis.setState(() => ({ \n\t\t\theight, \n\t\t\twidth,\n\t\t\tinvalidHeight: false,\n\t\t\tinvalidWidth: false\n\t\t}));\n\t\t\n\t}\n\n\t/** \n\t * Toggle the brushActive flag on state \n\t * to indicate if brush is active\n\t */\n\tbrushSelected() {\n\t\tthis.setState((brushActive) => ({\n\t\t\tbrushActive: true,\n\t\t\teraserActive: false\n\t\t}))\n\t}\n\n\t/** \n\t * Toggle the eraserActive flag on state \n\t * to indicate if brush is active\n\t */\n\teraserSelected() {\n\t\tthis.setState((eraserActive) => ({\n\t\t\teraserActive: true,\n\t\t\tbrushActive: false\n\t\t}))\n\t}\n\t\n\t/**\n\t * Render the EmojiPaint component\n\t * @return {ReactElement} - EmojiPaint element\n\t */\n\trender() {\n\t\tlet date = new Date();\n\t\tlet hours = date.getHours();\n\t\tlet minutes = date.getMinutes();\n\t\tlet suffix = hours >= 12 ? 'PM' : 'AM';\n\t\thours = hours > 12 ? hours - 12: hours;\n\t\tlet timeToDisplay = hours + ':' + minutes.toString().padStart(2, 0) +' '+suffix;\n\t\treturn (\n\t\t\t<div className=\"emoji-paint\">\n\t\t\t\t<div className=\"emoji-paint__toolbar\">\n\t\t\t\t\t<div className=\"emoji-paint__controls\">\n\t\t\t\t\t\t<button className=\"emoji-paint__control\" onClick={this.toggleEmojiPicker}>\n\t\t\t\t\t\t\t{this.state.activeEmoji}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"emoji-paint__control\" onClick={this.brushSelected}>\n\t\t\t\t\t\t\t<img className=\"emoji-paint__control_icon\" src=\"brush.png\" alt=\"brush\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button className=\"emoji-paint__control\" onClick={this.eraserSelected}>\n\t\t\t\t\t\t\t<img className=\"emoji-paint__control_icon\" src=\"eraser.png\" alt=\"eraser\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{this.state.isEmojiPickerShowing && (\n\t\t\t\t\t\t\t<EmojiPicker\n\t\t\t\t\t\t\t\temoji={this.props.emoji}\n\t\t\t\t\t\t\t\tonSelect={this.updateActiveEmoji}\n\t\t\t\t\t\t\t\tonClose={() => this.toggleEmojiPicker()}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label className={\"emoji-paint__dimension \" + (this.state.invalidWidth ? 'error' : '')}>\n\t\t\t\t\t\t\tWidth\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"emoji-paint__dimension_input\"\n\t\t\t\t\t\t\t\tonBlur={(e) => this.onSizeChange({ width: e.target.value, height: this.state.height })}\n\t\t\t\t\t\t\t\tdefaultValue={this.state.width}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<label className={\"emoji-paint__dimension \" + (this.state.invalidHeight ? 'error' : '')}>\n\t\t\t\t\t\t\tHeight\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName={\"emoji-paint__dimension_input \" + (this.state.invalidHeight ? 'error' : '')}\n\t\t\t\t\t\t\t\tonBlur={(e) => this.onSizeChange({ height: e.target.value, width: this.state.width })}\n\t\t\t\t\t\t\t\tdefaultValue={this.state.height}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"emoji_paint_user\">\n\t\t\t\t\t<img src=\"https://www.compulite.ca/wp-content/uploads/2016/02/slack-logo.png\" alt=\"User Profile\"></img>\n\t\t\t\t\t<span className=\"user_name\">Slack User</span>\n\t\t\t\t\t<span className=\"current_time\">{timeToDisplay}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"emoji_paint_grid\">\n\t\t\t\t\t\t{(!this.state.invalidHeight && !this.state.invalidWidth) && \n\t\t\t\t\t\t<EmojiGrid width={+this.state.width} height={+this.state.height} \n\t\t\t\t\t\t\t\t   totalCount={+this.state.width* +this.state.height}\n\t\t\t\t\t\t\t\t   currentEmoji={this.state.activeEmoji}\n\t\t\t\t\t\t\t\t   brushActive={this.state.brushActive} eraserActive={this.state.eraserActive}/>}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}