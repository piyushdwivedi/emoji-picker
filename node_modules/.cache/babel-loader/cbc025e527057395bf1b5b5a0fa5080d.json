{"ast":null,"code":"import _toConsumableArray from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/piyushdwivedi/coding_practice/emoji-picker/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/piyushdwivedi/coding_practice/emoji-picker/src/components/EmojiGrid/emoji-grid.js\";\nimport React, { Component } from 'react';\nimport './emoji-grid.css';\n\nvar EmojiGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EmojiGrid, _Component);\n\n  function EmojiGrid(props) {\n    var _this;\n\n    _classCallCheck(this, EmojiGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmojiGrid).call(this, props));\n    _this.clearEmojis = _this.clearEmojis.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.copyToClipboard = _this.copyToClipboard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      height: _this.props.height,\n      width: _this.props.width,\n      gridItems: Array.from(new Array(_this.props.totalCount)).map(function (item) {\n        return {\n          emoji: ''\n        };\n      }),\n      activeGridIndexes: [],\n      mouseDown: false\n    };\n    return _this;\n  }\n  /**\n   * rebuild \"gridItems\" list to re-render the grid and its items\n   * @param {object} nextProps - set of new props coming in\n   * @param {object} prevState - previous stored state\n   */\n\n\n  _createClass(EmojiGrid, [{\n    key: \"gridBoxClicked\",\n\n    /**\n     * Creates a clone of the items from state to avoid mutating the state directly.\n     * Populate the grid box with emoji and add index to activeGridIndexes list.\n     * @param {number} index - index of the grid box clicked\n     * NOTE: This function could have been separated out for eraser and brush.\n     * That would have helped avoid having these many if/else loops. \n     */\n    value: function gridBoxClicked(index) {\n      // basic validation to provide user with feedback\n      if (!this.props.brushActive && !this.props.eraserActive) {\n        alert('Please select brush to paint or eraser to clean');\n      } else {\n        var gridItems = _toConsumableArray(this.state.gridItems);\n\n        var activeGridIndexes = _toConsumableArray(this.state.activeGridIndexes); // when you try to paint\n\n\n        if (this.props.brushActive) {\n          // only push to activeGridIndexes list if index isnt already present\n          if (activeGridIndexes.indexOf(index) === -1) {\n            activeGridIndexes.push(index);\n          }\n\n          gridItems[index].emoji = gridItems[index].emoji ? gridItems[index].emoji : this.props.currentEmoji;\n        } else if (this.props.eraserActive) {\n          // when you try to erase\n          // before trying to clear, check if there are any emojis in grid\n          if (activeGridIndexes.length) {\n            var indexOfItem = activeGridIndexes.indexOf(index); // add check to make sure we don't end up deleting items from end of list\n            // since slice and splice remove items from end of list when given a negative index\n\n            if (indexOfItem > -1) {\n              activeGridIndexes.splice(indexOfItem, 1);\n              gridItems[index].emoji = '';\n            } else {// 'No emoji to erase here!' msg;\n            }\n          } else {\n            alert('No emojis to clear in the grid. Please add one first.');\n          }\n        }\n\n        this.setState(function () {\n          return {\n            gridItems: gridItems,\n            activeGridIndexes: activeGridIndexes\n          };\n        });\n      }\n    }\n    /**\n     * This method emulates the click-and-hold behavior in a way\n     * @param {boolean} value - to indicate if user is holding and dragging mouse \n     */\n\n  }, {\n    key: \"mouseDownActivated\",\n    value: function mouseDownActivated(value) {\n      this.setState(function () {\n        return {\n          mouseDown: value\n        };\n      });\n    }\n    /**\n     * If click-and-hold is active, then paint/erase the activeEmoji.\n     * @param {number} index - index of grid box thats entered \n     */\n\n  }, {\n    key: \"gridBoxEntered\",\n    value: function gridBoxEntered(evt, index) {\n      if (this.state.mouseDown) {\n        if (this.props.brushActive || this.props.eraserActive) {\n          this.gridBoxClicked(index);\n        }\n      }\n    }\n    /**\n     * Loops through the activeGridIndexes list to clear\n     * emojis on the grid.\n     */\n\n  }, {\n    key: \"clearEmojis\",\n    value: function clearEmojis() {\n      var gridItems = Array.from(new Array(this.props.totalCount)).map(function (item) {\n        return {\n          emoji: ''\n        };\n      });\n      var activeGridIndexes = [];\n      this.setState(function () {\n        return {\n          gridItems: gridItems,\n          activeGridIndexes: activeGridIndexes\n        };\n      });\n    }\n    /**\n     * Copy all contents from the grid to the clipboard\n     */\n\n  }, {\n    key: \"copyToClipboard\",\n    value: function copyToClipboard(lastColIndexList) {\n      var clipBoardString = '';\n      this.state.gridItems.forEach(function (item, index) {\n        // Beautify copied content - add new line for every new row in grid\n        var addNewLine = lastColIndexList.indexOf(index) > -1 ? '\\n' : ' ';\n        var stringToAppend = item.emoji ? item.emoji : ':blank:';\n        clipBoardString += stringToAppend + addNewLine;\n      }); // use navigator.clipboard API (supported on most browsers)\n\n      navigator.clipboard && navigator.clipboard.writeText(clipBoardString).then(function (resp) {\n        alert('All grid content copied to clipboard! Try pasting now.');\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // get first item's index in last row\n      var lastRowIndex = this.state.gridItems.length - this.props.width; // // get last items index in last column\n\n      var lastColIndex = this.props.width - 1;\n      var lastColIndexList = [];\n\n      for (var i = 0; i < this.props.height; i++) {\n        lastColIndexList.push(lastColIndex);\n        lastColIndex += this.props.width;\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(' + this.props.width + ', 41px)',\n          gridTemplateRows: 'repeat(' + this.props.height + ', 40px)',\n          justifyContent: 'center',\n          padding: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.state.gridItems.length && this.state.gridItems.map(function (item, index) {\n        return React.createElement(\"div\", {\n          key: index + 'box',\n          className: \"grid-boxes \" + (index >= lastRowIndex ? 'last_row ' : '') + (lastColIndexList.indexOf(index) > -1 ? 'last_column ' : '') + (index === _this2.props.width - 1 ? 'top-right ' : '') + (index === _this2.props.width * (_this2.props.height - 1) ? 'bottom-left' : ''),\n          onClick: function onClick() {\n            return _this2.gridBoxClicked(index);\n          },\n          onMouseDown: function onMouseDown() {\n            return _this2.mouseDownActivated(true);\n          },\n          onMouseUp: function onMouseUp() {\n            return _this2.mouseDownActivated(false);\n          },\n          onMouseEnter: function onMouseEnter(evt) {\n            return _this2.gridBoxEntered(evt, index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"emoji-paint_grid\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, item.emoji));\n      })), React.createElement(\"div\", {\n        className: \"emoji_paint_footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"emoji_paint_clear_button\",\n        onClick: this.clearEmojis,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Clear\"), React.createElement(\"button\", {\n        className: \"emoji_paint_copy_button\",\n        onClick: function onClick() {\n          return _this2.copyToClipboard(lastColIndexList);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Copy to Clipboard\")));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.height !== prevState.height || nextProps.width !== prevState.width) {\n        return {\n          height: nextProps.height,\n          width: nextProps.width,\n          gridItems: Array.from(new Array(nextProps.height * nextProps.width)).map(function (item) {\n            return {\n              emoji: ''\n            };\n          })\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return EmojiGrid;\n}(Component);\n\nexport default EmojiGrid;","map":{"version":3,"sources":["/Users/piyushdwivedi/coding_practice/emoji-picker/src/components/EmojiGrid/emoji-grid.js"],"names":["React","Component","EmojiGrid","props","clearEmojis","bind","copyToClipboard","state","height","width","gridItems","Array","from","totalCount","map","item","emoji","activeGridIndexes","mouseDown","index","brushActive","eraserActive","alert","indexOf","push","currentEmoji","length","indexOfItem","splice","setState","value","evt","gridBoxClicked","lastColIndexList","clipBoardString","forEach","addNewLine","stringToAppend","navigator","clipboard","writeText","then","resp","lastRowIndex","lastColIndex","i","display","gridTemplateColumns","gridTemplateRows","justifyContent","padding","mouseDownActivated","gridBoxEntered","nextProps","prevState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './emoji-grid.css';\n\nclass EmojiGrid extends Component {\n    constructor(props) {\n        super(props);\n        this.clearEmojis = this.clearEmojis.bind(this);\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n        this.state = {\n            height: this.props.height,\n            width: this.props.width,\n            gridItems: Array.from(new Array(this.props.totalCount)).map(item => {\n                return {\n                    emoji: ''\n                }\n            }),\n            activeGridIndexes: [],\n            mouseDown: false\n        }\n    }\n    /**\n     * rebuild \"gridItems\" list to re-render the grid and its items\n     * @param {object} nextProps - set of new props coming in\n     * @param {object} prevState - previous stored state\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if(nextProps.height !== prevState.height || nextProps.width !== prevState.width) {\n            return {\n                height: nextProps.height,\n                width: nextProps.width,\n                gridItems: Array.from(new Array(nextProps.height*nextProps.width)).map(item => {\n                    return {\n                        emoji: ''\n                    }\n                })\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates a clone of the items from state to avoid mutating the state directly.\n     * Populate the grid box with emoji and add index to activeGridIndexes list.\n     * @param {number} index - index of the grid box clicked\n     * NOTE: This function could have been separated out for eraser and brush.\n     * That would have helped avoid having these many if/else loops. \n     */\n    gridBoxClicked(index) {\n        // basic validation to provide user with feedback\n        if(!this.props.brushActive && !this.props.eraserActive) {\n            alert('Please select brush to paint or eraser to clean');\n        } else {\n            let gridItems = [...this.state.gridItems];\n            let activeGridIndexes = [...this.state.activeGridIndexes];\n            // when you try to paint\n            if(this.props.brushActive) {\n                // only push to activeGridIndexes list if index isnt already present\n                if(activeGridIndexes.indexOf(index) === -1) {\n                    activeGridIndexes.push(index);\n                }\n                gridItems[index].emoji = gridItems[index].emoji ? gridItems[index].emoji : this.props.currentEmoji;\n            } else if(this.props.eraserActive){ // when you try to erase\n                // before trying to clear, check if there are any emojis in grid\n                if(activeGridIndexes.length) {\n                    let indexOfItem = activeGridIndexes.indexOf(index);\n                    // add check to make sure we don't end up deleting items from end of list\n                    // since slice and splice remove items from end of list when given a negative index\n                    if(indexOfItem > -1) {\n                        activeGridIndexes.splice(indexOfItem, 1);\n                        gridItems[index].emoji = '';\n                    } else {\n                        // 'No emoji to erase here!' msg;\n                    }\n                } else {\n                    alert('No emojis to clear in the grid. Please add one first.');\n                }\n\n            }\n            this.setState(() => ({ gridItems, activeGridIndexes }));\n        }\n        \n    }\n\n    /**\n     * This method emulates the click-and-hold behavior in a way\n     * @param {boolean} value - to indicate if user is holding and dragging mouse \n     */\n    mouseDownActivated(value) {\n        this.setState(() => ({mouseDown: value}));\n    }\n\n    /**\n     * If click-and-hold is active, then paint/erase the activeEmoji.\n     * @param {number} index - index of grid box thats entered \n     */\n    gridBoxEntered(evt, index) {\n        if(this.state.mouseDown) {\n            if(this.props.brushActive || this.props.eraserActive) {\n                this.gridBoxClicked(index)\n            }\n        }\n    }\n\n    /**\n     * Loops through the activeGridIndexes list to clear\n     * emojis on the grid.\n     */\n    clearEmojis() {\n        let gridItems = Array.from(new Array(this.props.totalCount)).map(item => {\n            return {\n                emoji: ''\n            }\n        })\n        let activeGridIndexes = [];\n        this.setState(() => ({ gridItems, activeGridIndexes }));\n    }\n\n    /**\n     * Copy all contents from the grid to the clipboard\n     */\n    copyToClipboard(lastColIndexList) {\n        let clipBoardString = '';\n        this.state.gridItems.forEach((item, index) => {\n            // Beautify copied content - add new line for every new row in grid\n            let addNewLine = lastColIndexList.indexOf(index) > -1 ? '\\n' : ' ';\n            let stringToAppend = item.emoji ? item.emoji : ':blank:';\n            clipBoardString += stringToAppend + addNewLine;\n        })\n        // use navigator.clipboard API (supported on most browsers)\n        navigator.clipboard && navigator.clipboard.writeText(clipBoardString).then(resp => {\n            alert('All grid content copied to clipboard! Try pasting now.');\n        })\n    }\n    render() {\n        // get first item's index in last row\n        let lastRowIndex = this.state.gridItems.length - this.props.width;\n\n        // // get last items index in last column\n        let lastColIndex = this.props.width - 1;\n        let lastColIndexList = [];\n        for(let i=0; i< this.props.height; i++) {\n            lastColIndexList.push(lastColIndex);\n            lastColIndex += this.props.width;\n        }\n        return (\n            <React.Fragment>\n                <div className=\"grid-container\" \n                        style={{\n                            display: 'grid',\n                            gridTemplateColumns: 'repeat(' + this.props.width + ', 41px)',\n                            gridTemplateRows: 'repeat(' + this.props.height + ', 40px)',\n                            justifyContent: 'center',\n                            padding: '20px'\n                        }}>\n                    {this.state.gridItems.length && this.state.gridItems.map((item,index) => (\n                        <div key={index+'box'} \n                             className={\"grid-boxes \" + (index >= lastRowIndex  ?  'last_row ' : '') + \n                                        (lastColIndexList.indexOf(index) > -1  ?  'last_column ' : '') + \n                                        (index === this.props.width -1  ?  'top-right ' : '') + \n                                        (index === this.props.width * (this.props.height-1)  ?  'bottom-left' : '')} \n                             onClick={() => this.gridBoxClicked(index)}\n                             onMouseDown={() => this.mouseDownActivated(true)}\n                             onMouseUp={() => this.mouseDownActivated(false)}\n                             onMouseEnter={(evt) => this.gridBoxEntered(evt, index)}>\n                            <span className=\"emoji-paint_grid\">{item.emoji}</span>\n                        </div>\n                    ))}\n                </div>\n                <div className=\"emoji_paint_footer\">\n                    <button className=\"emoji_paint_clear_button\" onClick={this.clearEmojis}>Clear</button>\n                    <button className=\"emoji_paint_copy_button\" onClick={() => this.copyToClipboard(lastColIndexList)}>Copy to Clipboard</button>\n                </div>\n            </React.Fragment> \n        )\n    }\n}\nexport default EmojiGrid;"]},"metadata":{},"sourceType":"module"}